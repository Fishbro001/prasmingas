<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Trip</title>
    <script src="<%= baseUrl %>/node_modules/tinymce/tinymce.min.js" referrerpolicy="origin"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        form {
            max-width: 600px;
            margin: auto;
        }
        label {
            display: block;
            margin-top: 10px;
        }
        input, textarea, select {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            margin-bottom: 10px;
        }
        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        .delete-button {
            background-color: #f44336;
        }
        .delete-button:hover {
            background-color: #e57373;
        }
    </style>
    <script>
        tinymce.init({
            selector: '#trip_description',
            license_key: 'gpl',
            plugins: [
                'a11ychecker','advlist','advcode','advtable','autolink','checklist','markdown',
                'lists','link','image','charmap','preview','anchor','searchreplace','visualblocks',
                'powerpaste','fullscreen','formatpainter','insertdatetime','media','table','help','wordcount'
            ],
            toolbar: 'undo redo | formatpainter casechange blocks | bold italic backcolor | ' +
            'alignleft aligncenter alignright alignjustify | ' +
            'bullist numlist checklist outdent indent | removeformat | a11ycheck code table help'
        });

        document.addEventListener('DOMContentLoaded', function() {
            const tripSelect = document.getElementById('trip_select');
            const deleteButton = document.getElementById('deleteButton');
            
            tripSelect.addEventListener('change', async function() {
                const tripId = tripSelect.value;
                if (tripId) {
                    const response = await fetch(`<%= baseUrl %>/api/trips/${tripId}`);
                    const tripData = await response.json();
                    populateForm(tripData);
                    deleteButton.disabled = false; // Enable delete button when a trip is selected
                } else {
                    deleteButton.disabled = true; // Disable delete button if no trip is selected
                }
            });

            deleteButton.addEventListener('click', async function() {
                const tripId = tripSelect.value;
                if (tripId && confirm('Are you sure you want to delete this trip?')) {
                    const response = await fetch(`<%= baseUrl %>/api/trips/${tripId}`, {
                        method: 'DELETE'
                    });
                    if (response.ok) {
                        alert('Trip deleted successfully!');
                        location.reload(); // Refresh the page to update the trip list
                    } else {
                        const errorData = await response.json();
                        alert('Failed to delete trip. Error: ' + errorData.message);
                    }
                }
            });

            document.getElementById('editTripForm').addEventListener('submit', async function(event) {
                event.preventDefault();
                const formData = new FormData(document.getElementById('editTripForm'));
                const tripId = document.getElementById('trip_select').value;
                    console.log('formdata = ' +typeof formData);



                // Convert FormData to an object
                let updatedData = Object.fromEntries(formData);
                console.table(updatedData);

                //array of objects!
                let trip_programme = []; 
                let trips = [];
                let indexof = 0;
                let cleanedKey
                let tempObjTripProgramme = {};
                let tempObjTrips = {};

                Object.keys(updatedData).forEach((key, currIndex, array) => {
                if(key.includes(indexof + 1))
                {
                    trips.push(tempObjTrips);
                    tempObjTrips = {};
                    trip_programme.push(tempObjTripProgramme);
                    tempObjTripProgramme = {};
                    indexof++;
                }
                cleanedKey = key.replace(/^(trip_|day_)|_\d+$/g, '');

                //cleanedKey = key.replace('_' + indexof, '');
                if (key.startsWith('day_')) {
                    tempObjTripProgramme[cleanedKey] = updatedData[key];

                } else if (key.startsWith('trip_')) {
                    tempObjTrips[cleanedKey] = updatedData[key];
                }
                
                if(currIndex === array.length - 1) {
                    trips.push(tempObjTrips);
                    tempObjTrips = {};
                    trip_programme.push(tempObjTripProgramme);
                    tempObjTripProgramme = {};
                    indexof++;
                }
                });
                console.log('OLD');
                console.table(updatedData);

                Object.keys(updatedData).forEach(function (key) {
                if (/_\d/.test(key)) {
                    delete updatedData[key];
                }
                });




                updatedData.trips = trips;
                updatedData.trip_programme = trip_programme;

                console.log('NEW');
                console.table(updatedData);




                if (updatedData.trip_comment) {
                    try {
                        updatedData.trip_comment = JSON.parse(updatedData.trip_comment);
                    } catch (error) {
                        console.error('Error parsing trip_comment:', error);
                    }
                }
                updatedData.isactive = updatedData.isactive === 'on';


                if (updatedData.trips && Array.isArray(updatedData.trips)) {
                updatedData.trips.forEach(trip => {
                    if (trip.hasOwnProperty('isguaranteed')) {
                        trip.isguaranteed = trip.isguaranteed === 'on';
                    }
                });
            }
                // Log the data being sent
                console.log('Updated Data:', JSON.stringify(updatedData, null, 2));

                const response = await fetch(`<%= baseUrl %>/api/trips/${tripId}`, {
                    method: 'PATCH',
                    body: JSON.stringify(updatedData),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    alert('Trip updated successfully!');
                } else {
                    const errorData = await response.json();
                    console.error('Error Response:', errorData);
                    alert('Failed to update trip. Error: ' + errorData.message);
                }
            });
        });

        function populateForm(tripData) {
            document.getElementById('trip_name').value = tripData.trip_name;
            document.getElementById('trip_category').value = tripData.trip_category;
            document.getElementById('trip_transport').value = tripData.trip_transport;
            document.getElementById('trip_duration').value = tripData.trip_duration;
            tinymce.get('trip_description').setContent(tripData.trip_description);
            document.getElementById('trip_programme_sdesc').value = tripData.trip_programme_sdesc;
            document.getElementById('trip_pickuppoints').value = tripData.trip_pickuppoints.join(',');
            document.getElementById('trip_comment').value = JSON.stringify(tripData.trip_comment);
            document.getElementById('isactive').checked = tripData.isactive;

            // Populate day fields
            const dayContainer = document.getElementById('trip_programme_container');
            dayContainer.innerHTML = '';
            tripData.trip_programme.forEach((day, index) => {
                const dayFields = document.createElement('div');
                dayFields.className = 'day-fields';
                dayFields.innerHTML = `
                    <label for="day_title_${index}">Day Title:</label>
                    <input type="text" id="day_title_${index}" name="day_title_${index}" value="${day.day_title}" required>
                    <label for="day_desc_${index}">Day Description:</label>
                    <textarea id="day_desc_${index}" name="day_desc_${index}">${day.day_desc}</textarea>
                    <label for="day_media_${index}">Day Media (comma-separated):</label>
                    <input type="text" id="day_media_${index}" name="day_media_${index}" value="${day.day_media.join(',')}">
                `;
                dayContainer.appendChild(dayFields);
            });

            // Populate trip fields
            const tripContainer = document.getElementById('trips_container');
            tripContainer.innerHTML = '';
            tripData.trips.forEach((trip, index) => {
                let date = new Date(trip.date);
                let formattedDate = date.toISOString().split('T')[0];
                let formattedTime = date.toISOString().split('T')[1];
                // console.table(tripData);
                // console.table(tripData.trips);
                const tripFields = document.createElement('div');
                tripFields.className = 'trip-fields';
                tripFields.innerHTML = `
                    <label for="trip_date_${index}">Date:</label>
                    <input type="date" id="trip_date_${index}" name="trip_date_${index}" value="${formattedDate}" required>
                   
                    <label for="trip_time_${index}">Time:</label>
                    <input type="time" id="trip_time_${index}" name="trip_time_${index}" value="${trip.time}" required>
                    <label for="trip_discount_${index}">Discount:</label>
                    <input type="number" id="trip_discount_${index}" name="trip_discount_${index}" value="${trip.discount}" required>
                    <label for="trip_cost_${index}">Cost:</label>
                    <input type="number" id="trip_cost_${index}" name="trip_cost_${index}" value="${trip.cost}" required>
                    <label for="trip_isguaranteed_${index}">Is Guaranteed:</label>
                    <input type="checkbox" id="trip_isguaranteed_${index}" name="trip_isguaranteed_${index}" ${trip.isguaranteed ? 'checked' : ''}>
                    <label for="trip_seatstotal_${index}">Seats Total:</label>
                    <input type="text" id="trip_seatstotal_${index}" name="trip_seatstotal_${index}" value="${trip.seatstotal}" required>
                    <label for="trip_seatstaken_${index}">Seats Taken:</label>
                    <input type="text" id="trip_seatstaken_${index}" name="trip_seatstaken_${index}" value="${trip.seatstaken}" required>
                    <label for="trip_seatsoccupied_${index}">Seats Occupied (comma-separated):</label>
                    <input type="text" id="trip_seatsoccupied_${index}" name="trip_seatsoccupied_${index}" value="${trip.seatsoccupied.join(',')}">
                `;
                tripContainer.appendChild(tripFields);
            });
        }
    </script>
</head>
<body>
    <h1>Edit Trip</h1>
    <form id="editTripForm" enctype="multipart/form-data">
        <label for="trip_select">Select Trip:</label>
        <select id="trip_select" name="trip_select" required>
            <option value="" disabled selected>Select a trip</option>
            <% trips.forEach(trip => { %>
                <option value="<%= trip._id %>"><%= trip.trip_name %></option>
            <% }); %>
        </select>

        <label for="trip_name">Trip Name:</label>
        <input type="text" id="trip_name" name="trip_name" required>

        <label for="trip_category">Trip Category:</label>
        <input type="text" id="trip_category" name="trip_category" required>

        <label for="trip_transport">Trip Transport:</label>
        <select name="trip_transport" id="trip_transport" required>
            <option value="Autobusas">Autobusas</option>
            <option value="Lėktuvas">Lėktuvas</option>
        </select>

        <label for="trip_duration">Trip Duration:</label>
        <input type="text" id="trip_duration" name="trip_duration" required>

        <label for="trip_description">Trip Description:</label>
        <textarea id="trip_description" name="trip_description"></textarea>

        <label for="trip_programme_sdesc">Trip Programme Short Description:</label>
        <textarea id="trip_programme_sdesc" name="trip_programme_sdesc"></textarea>

        <label for="trip_programme">Trip Programme:</label>
        <div id="trip_programme_container">

        </div>

        <label for="trip_pickuppoints">Trip Pickup Points (comma-separated):</label>
        <input type="text" id="trip_pickuppoints" name="trip_pickuppoints">

        <label for="trip_comment">Trip Comments:</label>
        <textarea id="trip_comment" name="trip_comment"></textarea>

        <label for="trips">Trips:</label>
        <div id="trips_container">
        </div>

        <label for="isactive">Is Active:</label>
        <input type="checkbox" id="isactive" name="isactive">

        <button type="submit">Save Changes</button>
        <button type="button" id="deleteButton" class="delete-button" disabled>Delete Trip</button>
    </form>
</body>
</html>
